{"ast":null,"code":"import { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions';\n\n//  define the initial state\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products]\n      };\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\nexport default reducer;\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }","map":{"version":3,"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","arguments","length","undefined","action","type","product","map","_id","purchaseQuantity","newState","filter"],"sources":["/Users/sethleininger/Desktop/BOOTCAMP/Redux-Store/client/src/utils/reducers.js"],"sourcesContent":["import {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n//  define the initial state\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n}\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }\n\n"],"mappings":"AAAA,SACEA,eAAe,EACfC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,iBAAiB,EACjBC,uBAAuB,EACvBC,UAAU,EACVC,WAAW,QACN,WAAW;;AAElB;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,QAAQC,MAAM,CAACC,IAAI;IACjB;IACA,KAAKrB,eAAe;MAClB,OAAO;QACL,GAAGgB,KAAK;QACRN,QAAQ,EAAE,CAAC,GAAGU,MAAM,CAACV,QAAQ;MAC/B,CAAC;IAEH,KAAKT,WAAW;MACd,OAAO;QACL,GAAGe,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAES,MAAM,CAACE,OAAO;MACtC,CAAC;IACH,KAAKlB,oBAAoB;MACvB,OAAO;QACL,GAAGY,KAAK;QACRL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAE,GAAGS,MAAM,CAACV,QAAQ;MAC1C,CAAC;IACH;IACA;IACA,KAAKR,oBAAoB;MACvB,OAAO;QACL,GAAGc,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAEK,KAAK,CAACL,IAAI,CAACY,GAAG,CAAED,OAAO,IAAK;UAChC,IAAIF,MAAM,CAACI,GAAG,KAAKF,OAAO,CAACE,GAAG,EAAE;YAC9BF,OAAO,CAACG,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;UACpD;UACA,OAAOH,OAAO;QAChB,CAAC;MACH,CAAC;;IAEH;IACA;IACA,KAAKnB,gBAAgB;MACnB,IAAIuB,QAAQ,GAAGV,KAAK,CAACL,IAAI,CAACgB,MAAM,CAAEL,OAAO,IAAK;QAC5C,OAAOA,OAAO,CAACE,GAAG,KAAKJ,MAAM,CAACI,GAAG;MACnC,CAAC,CAAC;;MAEF;MACA;MACA,OAAO;QACL,GAAGR,KAAK;QACRJ,QAAQ,EAAEc,QAAQ,CAACR,MAAM,GAAG,CAAC;QAC7BP,IAAI,EAAEe;MACR,CAAC;IAEH,KAAKnB,UAAU;MACb,OAAO;QACL,GAAGS,KAAK;QACRJ,QAAQ,EAAE,KAAK;QACfD,IAAI,EAAE;MACR,CAAC;IAEH,KAAKH,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRJ,QAAQ,EAAE,CAACI,KAAK,CAACJ;MACnB,CAAC;IAEH,KAAKP,iBAAiB;MACpB,OAAO;QACL,GAAGW,KAAK;QACRH,UAAU,EAAE,CAAC,GAAGO,MAAM,CAACP,UAAU;MACnC,CAAC;IAEH,KAAKP,uBAAuB;MAC1B,OAAO;QACL,GAAGU,KAAK;QACRF,eAAe,EAAEM,MAAM,CAACN;MAC1B,CAAC;;IAEH;IACA;IACA;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,OAAO;;AAEtB;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}